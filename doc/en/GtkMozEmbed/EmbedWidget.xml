<Type Name="EmbedWidget" FullName="GtkMozEmbed.EmbedWidget">
  <TypeSignature Language="C#" Value="public class EmbedWidget : Gtk.Bin, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>gtkmozembed-sharp</AssemblyName>
    <AssemblyPublicKey />
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Embed a Mozilla browser window into your Gtk# application.</summary>
    <remarks>
      <para>
	     It is designed to be easy to use and uncomplicated to make the barrier for use as low as possible.
		 This means that the functionality exposed should cover about 80% of uses.
	  </para>
      <para>
	    The following sample is a very minimal web browser.
	  </para>
      <example>
        <code language="C#">
using System;
using Gtk;
using GtkSharp;
using GtkMozEmbed;
using GtkMozEmbedSharp;

namespace GtkMozTest
{
	class GtkMozTest
	{
		EmbedWidget moz;
		Entry entry;
		string currentUrl;
		Statusbar sb;
		ProgressBar pb;
		
		static void Main (string[] args)
		{
			new GtkMozTest ();
		}
		
		GtkMozTest ()
		{
			Application.Init ();
			
			Window win = new Window ("GtkMozTest");
			win.SetDefaultSize (800, 600);
			win.DeleteEvent += new DeleteEventHandler (window_delete);
			
			VBox vbox = new VBox (false, 1);
			win.Add (vbox);
			
			HBox tb = new HBox (true, 1);
			Button btnBack = Button.NewFromStock (Gtk.Stock.GoBack);
			btnBack.Clicked += new EventHandler (on_btnBack_clicked);
			Button btnForward = Button.NewFromStock (Gtk.Stock.GoForward);
			btnForward.Clicked += new EventHandler (on_btnForward_clicked);
			Button btnStop = Button.NewFromStock (Gtk.Stock.Stop);
			btnStop.Clicked += new EventHandler (on_btnStop_clicked);
			Button btnRefresh = Button.NewFromStock (Gtk.Stock.Refresh);
			btnRefresh.Clicked += new EventHandler (on_btnRefresh_clicked);
			tb.Add (btnBack);
			tb.Add (btnForward);
			tb.Add (btnStop);
			tb.Add (btnRefresh);
			
			vbox.PackStart (tb, false, false, 1);
			
			HBox hbox = new HBox (false, 1);
			
			Label label = new Label ("Address:");
			
			entry = new Entry ("URL");
			entry.Activated += new EventHandler (entry_activated);
			
			Button button = new Button ("GO!");
			button.Clicked += new EventHandler (button_clicked);
			
			hbox.PackStart (label, false, false, 1);
			hbox.PackStart (entry, true, true, 1);
			hbox.PackStart (button, false, false, 1);
			
			vbox.PackStart (hbox, false, false, 1);
			
			moz = new EmbedWidget ("/tmp/csharp", "GtkMozTest");
			moz.LinkMessage += new EventHandler(on_moz_linkmessage);
			vbox.PackStart(moz, true, true, 1);
			
			HBox hbox2 = new HBox (false, 1);
			vbox.PackStart (hbox2, false, false, 1);
			
			sb = new Statusbar ();
			sb.Push (1, "Welcome!");
			hbox2.Add (sb);
			
			pb = new ProgressBar ();
			pb.Orientation = ProgressBarOrientation.LeftToRight;
			hbox2.Add (pb);
			
			win.ShowAll ();
			
			Application.Run ();
		}
		
		void window_delete (object obj, DeleteEventArgs args)
		{
			Application.Quit();
		}
		
		void button_clicked (object obj, EventArgs args)
		{
			LoadHtml (entry.Text.Trim());
		}
		
		void on_moz_linkmessage (object obj, EventArgs args)
		{
			sb.Pop (1);
			sb.Push (1, moz.GeckoLinkMessage);
		}
		
		void entry_activated (object obj, EventArgs args)
		{
			button_clicked (obj, args);
		}
		
		void LoadHtml (string URL)
		{
			moz.LoadUrl (URL);
		}
		
		void on_btnBack_clicked (object obj, EventArgs args)
		{
			moz.GoBack();
		}

		void on_btnStop_clicked (object obj, EventArgs args)
		{
			moz.StopLoad();
		}

		void on_btnForward_clicked (object obj, EventArgs args)
		{
			moz.GoForward();
		}

		void on_btnRefresh_clicked (object obj, EventArgs args)
		{
			moz.Reload(0);
		}	
	}
}
	    </code>
      </example>
      <para>
	    Compile with: mcs GtkMozTest.cs -r gtk-sharp -r gtkmozembed-sharp
	  </para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Bin</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="SetProfilePath">
      <MemberSignature Language="C#" Value="public static void SetProfilePath (string aDir, string aName);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aDir" Type="System.String" />
        <Parameter Name="aName" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="aDir">an object of type <see cref="T:System.String" /></param>
        <param name="aName">an object of type <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopStartup">
      <MemberSignature Language="C#" Value="public static void PopStartup ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushStartup">
      <MemberSignature Language="C#" Value="public static void PushStartup ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoBack">
      <MemberSignature Language="C#" Value="public bool CanGoBack ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether or not you can go backwards in the navigation history.</summary>
        <returns>an object of type <see cref="T:System.Boolean" /></returns>
        <remarks>It will return <see langword="true" /> if it can go backwards, <see langword="false" /> if it can not.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderData">
      <MemberSignature Language="C#" Value="public void RenderData (string data, string base_uri, string mime_type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="len" Type="System.UInt32" />
        <Parameter Name="base_uri" Type="System.String" />
        <Parameter Name="mime_type" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Allows you to take a chunk of random data and render it into the document.</summary>
        <param name="data">an object of type <see cref="T:System.String" /></param>
        <param name="len">an object of type <see cref="T:System.UInt32" /></param>
        <param name="base_uri">an object of type <see cref="T:System.String" /></param>
        <param name="mime_type">an object of type <see cref="T:System.String" /></param>
        <remarks>
		  The <paramref name="base_uri" /> is used to resolve internal references in the document and the <paramref name="mime_type" /> is used to determine how to render the document internally.
		</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="public void OpenStream (string base_uri, string mime_type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base_uri" Type="System.String" />
        <Parameter Name="mime_type" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Start loading a document from an external source into the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <param name="base_uri">an object of type <see cref="T:System.String" /></param>
        <param name="mime_type">an object of type <see cref="T:System.String" /></param>
        <remarks>You need to pass in the <paramref name="base_uri" /> for resolving internal links and and the <paramref name="mime_type" /> of the document.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoForward">
      <MemberSignature Language="C#" Value="public void GoForward ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Go forward one step in the navigation history.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AppendData">
      <MemberSignature Language="C#" Value="public void AppendData (string data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="len" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Allows you to append data to an already opened stream in the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <param name="data">an object of type <see cref="T:System.String" /></param>
        <param name="len">an object of type <see cref="T:System.UInt32" /></param>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GoBack">
      <MemberSignature Language="C#" Value="public void GoBack ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Go backwards one step in the navigation history.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CloseStream">
      <MemberSignature Language="C#" Value="public void CloseStream ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the stream that you have been using to append data manually to the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public void Reload (int flags);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>Reloads the document</summary>
        <param name="flags">an object of type <see cref="T:System.Int32" /></param>
        <remarks>The <see cref="T:GtkMozEmbed.ReloadFlags" /> argument can be used to control the behaviour of the reload.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopLoad">
      <MemberSignature Language="C#" Value="public void StopLoad ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stop the load of a document that is being loaded in the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanGoForward">
      <MemberSignature Language="C#" Value="public bool CanGoForward ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether or not you can go forward in the navigation history.</summary>
        <returns>an object of type <see cref="T:System.Boolean" /></returns>
        <remarks>It will return <see langword="true" /> if it can go forwards, <see langword="false" /> if it can not.
		</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadUrl">
      <MemberSignature Language="C#" Value="public void LoadUrl (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Start loading a url in the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <param name="url">an object of type <see cref="T:System.String" /></param>
        <remarks>
		  All loads are asynchronous.
		  The url argument should be in the form of http://www.gnome.org.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EmbedWidget (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">an object of type 'GLib.Type'</param>
        <returns>an object of type <see cref="T:GtkMozEmbed.EmbedWidget" /></returns>
        <remarks>This is not typically called by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmbedWidget (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">an object of type <see cref="T:System.IntPtr" /></param>
        <returns>an object of type <see cref="T:GtkMozEmbed.EmbedWidget" /></returns>
        <remarks>This is not typically called by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmbedWidget (string aPath, string aDir);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="aPath" Type="System.String" />
        <Parameter Name="aDir" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Creates a new <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <param name="aPath">an object of type <see cref="T:System.String" /></param>
        <param name="aDir">an object of type <see cref="T:System.String" /></param>
        <returns>an object of type <see cref="T:GtkMozEmbed.EmbedWidget" /></returns>
        <remarks>Creates a new <see cref="T:GtkMozEmbed.EmbedWidget" />. This is the most commonly used constructor.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmbedWidget ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Default constructor</summary>
        <returns>an object of type <see cref="T:GtkMozEmbed.EmbedWidget" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:GLib.Type" /> of the <see cref="T:GtkMozEmbed.EmbedWidget" />.</summary>
        <returns>an object of type <see cref="T:System.UInt32" /></returns>
        <remarks>The <see cref="T:GLib.Type" /> of the <see cref="T:GtkMozEmbed.EmbedWidget" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompPath">
      <MemberSignature Language="C#" Value="public static string CompPath { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Allows you to set the path to the mozilla components.</summary>
        <param name="value">an object of type <see cref="T:System.String" /></param>
        <returns>an object of type <see cref="T:System.String" /></returns>
        <remarks>
		  This function must be called before the first <see cref="T:Gtk.Widget" /> is created or XPCOM is initialized. 
		  It allows you to set the path to the mozilla components.
		</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChromeMask">
      <MemberSignature Language="C#" Value="public uint ChromeMask { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>The chrome mask for this <see cref="T:GtkMozEmbed.EmbedWidget" /></summary>
        <param name="value">an object of type <see cref="T:System.UInt32" /></param>
        <returns>an object of type <see cref="T:System.UInt32" /></returns>
        <remarks>It can be one of <see cref="T:GtkMozEmbed.ChromeFlags" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeckoTitle">
      <MemberSignature Language="C#" Value="public string GeckoTitle { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current title for a document</summary>
        <returns>an object of type <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GeckoLocation">
      <MemberSignature Language="C#" Value="public string GeckoLocation { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current location of the document</summary>
        <returns>an object of type <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GeckoJsStatus">
      <MemberSignature Language="C#" Value="public string GeckoJsStatus { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the js_status message if there is one</summary>
        <returns>an object of type <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GeckoLinkMessage">
      <MemberSignature Language="C#" Value="public string GeckoLinkMessage { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current link message of the document if there is one</summary>
        <returns>an object of type <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.VisibilityHandler Visibility;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when the toplevel window in question needs to be shown or hidden.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Progress">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.ProgressHandler Progress;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted any time that there is a change in the progress of loading a document.</summary>
        <remarks>
          <para>
             The cur value indicates how much of the document has been downloaded.
          </para>
          <para>
             The max value indicates the length of the document. If the value of max is less than one the full length of the document can not be determined.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomKeyDown">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomKeyDownHandler DomKeyDown;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseDown">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseDownHandler DomMouseDown;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProgressAll">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.ProgressAllHandler ProgressAll;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseUp">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseUpHandler DomMouseUp;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseClick">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseClickHandler DomMouseClick;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetStop">
      <MemberSignature Language="C#" Value="public event EventHandler NetStop;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted any time that the loading of a document has completed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DestroyBrowser">
      <MemberSignature Language="C#" Value="public event EventHandler DestroyBrowser;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when the document as requested that the toplevel window be closed.</summary>
        <remarks>This will happen in the case of a JavaScript window.close().</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetStart">
      <MemberSignature Language="C#" Value="public event EventHandler NetStart;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted any time that the load of a document has been started.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NetState">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.NetStateHandler NetState;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when there is a change in the state of the loading of a document.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SecurityChange">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.SecurityChangeHandler SecurityChange;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkMessage">
      <MemberSignature Language="C#" Value="public event EventHandler LinkMessage;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when the link message changes.</summary>
        <remarks>
          This happens when the user moves the mouse over a link in a web page.
          Use <see cref="P:GtkMozEmbed.GeckoLinkMessage" /> to get the actual value of the link message.
		</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseDblClick">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseDblClickHandler DomMouseDblClick;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomKeyPress">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomKeyPressHandler DomKeyPress;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public event EventHandler Title;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted any time that the title of a document has changed.</summary>
        <remarks>
          Use the <see cref="P:GtkMozEmbed.GeckoTitle" /> to get the actual value of the title.
		</remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public event EventHandler Location;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted any time that the location of the document has changed.</summary>
        <remarks>Use <see cref="P:Gtk.Moz.Embed.GeckoLocation" /> to get the actual value of the location.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseOut">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseOutHandler DomMouseOut;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomMouseOver">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomMouseOverHandler DomMouseOver;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeTo">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.SizeToHandler SizeTo;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DomKeyUp">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.DomKeyUpHandler DomKeyUp;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUri">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.OpenUriHandler OpenUri;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when the document tries to load a new document.</summary>
        <remarks>
          <para>
			For example when someone clicks on a link in a web page.
			This signal gives the embedder the opportunity to keep the new document from being loaded.
			The uri argument is the uri that is going to be loaded.
		  </para>
          <para>
		    If you return <see langword="true" /> from this signal, the new document will NOT be loaded.
			If you return <see langword="false" /> the new document will be loaded.
			This is somewhat non-intuitive.
			Think of it as the Mozilla engine is asking if you want to interrupt the loading of a new document.
			By returning <see langword="true" /> you are saying "do not load this document."
		  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JsStatus">
      <MemberSignature Language="C#" Value="public event EventHandler JsStatus;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Emitted when the JavaScript status message changes.</summary>
        <remarks>Use <see cref="P:GtkMozEmbed.GeckoJsStatus" /> to get the actual value of the js status message.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetStateAll">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.NetStateAllHandler NetStateAll;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusChange">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.StatusChangeHandler StatusChange;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWindow">
      <MemberSignature Language="C#" Value="public event GtkMozEmbedSharp.NewWindowHandler NewWindow;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>GtkMozEmbedSharp.NewWindowHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
