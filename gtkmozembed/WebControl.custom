		delegate void NewWindowDelegate (IntPtr embed, IntPtr newEmbed, uint chromemask);

		static NewWindowDelegate NewWindowCallback;

		static void newwindow_cb (IntPtr embed, IntPtr newEmbed, uint chromemask)
		{
			WebControl obj = GLib.Object.GetObject (embed, false) as WebControl;
			obj.OnNewWindow ((Gecko.WebControl) GLib.Object.GetObject(newEmbed), chromemask);
		}

		protected static void OverrideNewWindow (GLib.GType gtype)
		{
			if (NewWindowCallback == null)
				NewWindowCallback = new NewWindowDelegate (newwindow_cb);
			OverrideVirtualMethod (gtype, "new_window", NewWindowCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gecko.WebControl), ConnectionMethod="OverrideNewWindow")]
		protected virtual void OnNewWindow (Gecko.WebControl newEmbed, uint chromemask)
		{
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (newEmbed);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (chromemask);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref GLib.Value.Empty);
		}

		[GLib.Signal("new_window")]
		public event Gecko.NewWindowHandler NewWindow {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["new_window"] == null)
						BeforeSignals["new_window"] = new GtkSharp.voidObjectObjectuintSignal(this, Handle, "new_window", value, System.Type.GetType("Gtk.NewWindowArgs,gtkmozembed-sharp"), 0);
					else
						((GLib.SignalCallback) BeforeSignals ["new_window"]).AddDelegate (value);
					BeforeHandlers.AddHandler("new_window", value);
				} else {
					if (AfterHandlers["new_window"] == null)
						AfterSignals["new_window"] = new GtkSharp.voidObjectObjectuintSignal(this, Handle, "new_window", value, System.Type.GetType("Gtk.NewWindowArgs,gtkmozembed-sharp"), 1);
					else
						((GLib.SignalCallback) AfterSignals ["new_window"]).AddDelegate (value);
					AfterHandlers.AddHandler("new_window", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["new_window"] as GLib.SignalCallback;
				event_list.RemoveHandler("new_window", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["new_window"] == null) {
					signals.Remove("new_window");
					cb.Dispose ();
				}
			}
		}

[DllImport("gtkembedmoz.dll")]
static extern IntPtr gtk_moz_embed_new();

private void InitProfile (string aPath, string aDir)
{
	// Check for Windows
	// On .NET 2.0 its "3" for Unix, Linux, and Mac
	// On any version of Mono for anything but Windows (pre 2.0 api) its "128"
	if (((int) System.Environment.OSVersion.Platform) >= 4) 
	{
        	// HACK: This is to fix shared profile issues on WIN32
        	// We append a unique string to the end of the path.
        	aPath +=  System.Guid.NewGuid().ToString("N");
	} 
	
	// gtk_moz_embed_set_profile_path(aPath, aDir);
	SetProfilePath (aPath, aDir);
	Raw = gtk_moz_embed_new ();
}

public WebControl(string aPath, string aDir) : base (IntPtr.Zero)
{
	InitProfile (aPath, aDir);
}

public WebControl() : base (IntPtr.Zero)
{
	InitProfile ("gecko-sharp", "DummyProfile");
}
